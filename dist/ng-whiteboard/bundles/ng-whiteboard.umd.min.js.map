{"version":3,"sources":["ng://ng-whiteboard/lib/ng-whiteboard.service.ts","ng://ng-whiteboard/lib/ng-whiteboard.types.ts","ng://ng-whiteboard/lib/ng-whiteboard.component.ts","ng://ng-whiteboard/lib/ng-whiteboard.module.ts"],"names":["NgWhiteboardService","this","eraseSvgMethodCallSource","Subject","saveSvgMethodCallSource","undoSvgMethodCallSource","redoSvgMethodCallSource","addImageMethodCallSource","eraseSvgMethodCalled$","asObservable","saveSvgMethodCalled$","undoSvgMethodCalled$","redoSvgMethodCalled$","addImageMethodCalled$","prototype","erase","next","save","name","format","undo","redo","addImage","image","Injectable","args","providedIn","WhiteboardOptions","color","backgroundColor","size","linejoin","linecap","ActionType","Line","Image","NgWhiteboardComponent","whiteboardService","whiteboardOptions","init","EventEmitter","clear","imageAdded","selection","undefined","subscriptionList","undoStack","redoStack","b64toBlob","b64DataUrl","sliceSize","arr","split","contentType","match","byteCharacters","atob","byteArrays","offset","length","slice","byteNumbers","Array","i","charCodeAt","byteArray","Uint8Array","push","Blob","type","ngAfterViewInit","_this","subscribe","eraseSvg","_a","saveSvg","undoDraw","redoDraw","initSvg","svgContainer","nativeElement","ngOnDestroy","forEach","subscription","_unsubscribe","selector","d3Line","line","curve","curveBasis","svg","select","call","drag","container","subject","p","event","x","y","on","d","active","append","datum","attr","mouse","node","emit","drawImage","selectAll","remove","svgString","saveAsSvg","clone","download","btoa","unescape","encodeURIComponent","svgString2Image","Number","style","replace","img","pop","action","drawLine","pathNode","appendChild","group","data","r","scale","tempImg","onload","width","height","toString","cursor","cord","parentNode","src","unsubscribe","callback","svgData","canvas","document","createElement","context","getContext","clearRect","pngData","toDataURL","svgNode","setAttribute","XMLSerializer","serializeToString","url","file","Component","template","ViewChild","static","Input","Output","NgWhiteboardModule","NgModule","declarations","imports","exports"],"mappings":"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","sourcesContent":["import { Injectable } from '@angular/core';\r\nimport { Subject } from 'rxjs';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class NgWhiteboardService {\r\n  // Observable string sources\r\n  private eraseSvgMethodCallSource = new Subject<any>();\r\n  private saveSvgMethodCallSource = new Subject<{ name: string; format: 'png' | 'jpeg' | 'svg' }>();\r\n  private undoSvgMethodCallSource = new Subject<any>();\r\n  private redoSvgMethodCallSource = new Subject<any>();\r\n  private addImageMethodCallSource = new Subject<string | ArrayBuffer>();\r\n\r\n  // Observable string streams\r\n  eraseSvgMethodCalled$ = this.eraseSvgMethodCallSource.asObservable();\r\n  saveSvgMethodCalled$ = this.saveSvgMethodCallSource.asObservable();\r\n  undoSvgMethodCalled$ = this.undoSvgMethodCallSource.asObservable();\r\n  redoSvgMethodCalled$ = this.redoSvgMethodCallSource.asObservable();\r\n  addImageMethodCalled$ = this.addImageMethodCallSource.asObservable();\r\n\r\n  // Service message commands\r\n  public erase(): void {\r\n    this.eraseSvgMethodCallSource.next();\r\n  }\r\n  public save(name: string = 'New image', format: 'png' | 'jpeg' | 'svg' = 'png'): void {\r\n    this.saveSvgMethodCallSource.next({ name, format });\r\n  }\r\n  public undo(): void {\r\n    this.undoSvgMethodCallSource.next();\r\n  }\r\n  public redo(): void {\r\n    this.redoSvgMethodCallSource.next();\r\n  }\r\n  public addImage(image: string | ArrayBuffer): void {\r\n    this.addImageMethodCallSource.next(image);\r\n  }\r\n}\r\n","export class WhiteboardOptions {\r\n  color = '#000000';\r\n  backgroundColor = '#ffffff';\r\n  size = '5px';\r\n  linejoin: 'miter' | 'round' | 'bevel' | 'miter-clip' | 'arcs' = 'round';\r\n  linecap: 'butt' | 'square' | 'round' = 'round';\r\n}\r\n\r\nexport interface ActionStack {\r\n  type: ActionType;\r\n  line?: SVGPathElement;\r\n  image?: SVGGElement;\r\n}\r\n\r\nexport enum ActionType {\r\n  Line,\r\n  Image\r\n}\r\n","import { Component, AfterViewInit, ViewChild, Input, ElementRef, OnDestroy, Output, EventEmitter } from '@angular/core';\r\nimport { NgWhiteboardService } from './ng-whiteboard.service';\r\nimport { Subscription } from 'rxjs';\r\nimport { WhiteboardOptions, ActionStack, ActionType } from './ng-whiteboard.types';\r\nimport { ContainerElement, curveBasis, select, drag, Selection, line, event, mouse } from 'd3';\r\n\r\n@Component({\r\n  // tslint:disable-next-line: component-selector\r\n  selector: 'ng-whiteboard-btc',\r\n  template: `\r\n    <svg #svgContainer [style.background-color]=\"this.backgroundColor || this.whiteboardOptions.backgroundColor\"></svg>\r\n  `,\r\n  styleUrls: ['ng-whiteboard.component.scss'],\r\n})\r\nexport class NgWhiteboardComponent implements AfterViewInit, OnDestroy {\r\n  @ViewChild('svgContainer', { static: false }) private svgContainer: ElementRef<ContainerElement>;\r\n  @Input() whiteboardOptions: WhiteboardOptions = new WhiteboardOptions();\r\n  @Input() color: string;\r\n  @Input() backgroundColor: string;\r\n  @Input() size: string;\r\n  @Input() linejoin: 'miter' | 'round' | 'bevel' | 'miter-clip' | 'arcs';\r\n  @Input() linecap: 'butt' | 'square' | 'round';\r\n\r\n  @Output() init = new EventEmitter();\r\n  @Output() clear = new EventEmitter();\r\n  @Output() undo = new EventEmitter();\r\n  @Output() redo = new EventEmitter();\r\n  @Output() save: EventEmitter<any> = new EventEmitter<string | Blob | File>();\r\n  @Output() imageAdded = new EventEmitter();\r\n\r\n  private selection: Selection<any, unknown, null, undefined> = undefined;\r\n\r\n  private subscriptionList: Subscription[] = [];\r\n\r\n  private undoStack: ActionStack[] = [];\r\n  private redoStack: ActionStack[] = [];\r\n\r\n  constructor(private whiteboardService: NgWhiteboardService) {}\r\n\r\n  ngAfterViewInit() {\r\n    this.subscriptionList.push(\r\n      this.whiteboardService.eraseSvgMethodCalled$.subscribe(() => this.eraseSvg(this.selection))\r\n    );\r\n\r\n    this.subscriptionList.push(\r\n      this.whiteboardService.saveSvgMethodCalled$.subscribe(({ name, format }) => this.saveSvg(name, format))\r\n    );\r\n    this.subscriptionList.push(this.whiteboardService.undoSvgMethodCalled$.subscribe(() => this.undoDraw()));\r\n    this.subscriptionList.push(this.whiteboardService.redoSvgMethodCalled$.subscribe(() => this.redoDraw()));\r\n    this.subscriptionList.push(this.whiteboardService.addImageMethodCalled$.subscribe((image) => this.addImage(image)));\r\n\r\n    this.selection = this.initSvg(this.svgContainer.nativeElement);\r\n  }\r\n\r\n  ngOnDestroy(): void {\r\n    this.subscriptionList.forEach((subscription) => this._unsubscribe(subscription));\r\n  }\r\n\r\n  private initSvg(selector: ContainerElement) {\r\n    const d3Line = line().curve(curveBasis);\r\n    const svg = select(selector).call(\r\n      drag()\r\n        .container(selector)\r\n        .subject(() => {\r\n          const p = [event.x, event.y];\r\n          return [p, p];\r\n        })\r\n        .on('start', () => {\r\n          const d = event.subject;\r\n          const active = svg\r\n            .append('path')\r\n            .datum(d)\r\n            .attr('class', 'line')\r\n            .attr(\r\n              'style',\r\n              `\r\n           fill: none;\r\n           stroke: ${this.color || this.whiteboardOptions.color};\r\n           stroke-width: ${this.size || this.whiteboardOptions.size};\r\n           stroke-linejoin: ${this.linejoin || this.whiteboardOptions.linejoin};\r\n           stroke-linecap: ${this.linecap || this.whiteboardOptions.linecap};\r\n           `\r\n            );\r\n          active.attr('d', d3Line);\r\n          event.on('drag', function () {\r\n            active.datum().push(mouse(this));\r\n            active.attr('d', d3Line);\r\n          });\r\n          event.on('end', () => {\r\n            active.attr('d', d3Line);\r\n            if (this.undoStack.length < 1) {\r\n              this.redoStack = [];\r\n            }\r\n            this.undoStack.push({ type: ActionType.Line, line: active.node() });\r\n          });\r\n        })\r\n    );\r\n    this.init.emit();\r\n    return svg;\r\n  }\r\n\r\n  private addImage(image: string | ArrayBuffer) {\r\n    this.drawImage(image);\r\n  }\r\n\r\n  private eraseSvg(svg: Selection<any, unknown, null, undefined>) {\r\n    svg.selectAll('*').remove();\r\n    this.undoStack = [];\r\n    this.redoStack = [];\r\n    this.clear.emit();\r\n  }\r\n\r\n  private saveSvg(name, format: 'png' | 'jpeg' | 'svg') {\r\n    const svgString = this.saveAsSvg(this.selection.clone(true).node());\r\n    if (format === 'svg') {\r\n      this.download('data:image/svg+xml;base64,' + btoa(unescape(encodeURIComponent(svgString))), name);\r\n    } else {\r\n      this.svgString2Image(\r\n        svgString,\r\n        Number(this.selection.style('width').replace('px', '')),\r\n        Number(this.selection.style('height').replace('px', '')),\r\n        format,\r\n        (img) => {\r\n          this.download(img, name);\r\n        }\r\n      );\r\n    }\r\n\r\n    // this.save.emit();\r\n  }\r\n\r\n  private undoDraw() {\r\n    if (!this.undoStack.length) {\r\n      return;\r\n    }\r\n    this.redoStack.push(this.undoStack.pop());\r\n    this.selection.selectAll('.line').remove();\r\n    this.undoStack.forEach((action) => {\r\n      if (action.type === ActionType.Line) {\r\n        this.drawLine(action.line);\r\n      } else if (action.type === ActionType.Image) {\r\n        this.drawLine(action.image);\r\n      }\r\n    });\r\n    this.undo.emit();\r\n  }\r\n\r\n  private redoDraw() {\r\n    if (!this.redoStack.length) {\r\n      return;\r\n    }\r\n    this.undoStack.push(this.redoStack.pop());\r\n    this.selection.selectAll('.line').remove();\r\n    this.undoStack.forEach((action) => {\r\n      if (action.type === ActionType.Line) {\r\n        this.drawLine(action.line);\r\n      } else if (action.type === ActionType.Image) {\r\n        this.drawLine(action.image);\r\n      }\r\n    });\r\n    this.redo.emit();\r\n  }\r\n\r\n  private drawLine(pathNode: SVGPathElement | SVGGElement) {\r\n    this.selection.node().appendChild(pathNode);\r\n  }\r\n\r\n  private drawImage(image: string | ArrayBuffer) {\r\n    const group = this.selection\r\n      .append('g')\r\n      .data([{ x: 20, y: 20, r: 1, scale: 1 }])\r\n      .attr('x', 0)\r\n      .attr('y', 0)\r\n      .attr('transform', 'translate(0,0)');\r\n\r\n    const tempImg = new Image();\r\n    tempImg.onload = () => {\r\n      const aspectRatio = tempImg.width / tempImg.height;\r\n      const height = Number(this.selection.style('height').replace('px', ''));\r\n      // tempImg.height > Number(this.selection.style('height').replace('px', ''))\r\n      //   ? Number(this.selection.style('height').replace('px', '')) - 40\r\n      //   : tempImg.height;\r\n      const width = Number(this.selection.style('width').replace('px', ''));\r\n      // height === Number(this.selection.style('height').replace('px', '')) - 40\r\n      //   ? (Number(this.selection.style('height').replace('px', '')) - 40) * aspectRatio\r\n      //   : tempImg.width;\r\n      group\r\n        .append('image')\r\n        .attr('x', 0)\r\n        .attr('y', 0)\r\n        .attr('height', height)\r\n        .attr('width', width)\r\n        .attr('preserveAspectRatio', 'none')\r\n        .attr('xlink:href', image.toString());\r\n\r\n      group\r\n        .append('rect')\r\n        .attr('x', 0)\r\n        .attr('y', 0)\r\n        .attr('width', 20)\r\n        .attr('height', 20)\r\n        .style('opacity', 0)\r\n        .attr('fill', (d) => {\r\n          return '#cccccc';\r\n        })\r\n        .call(\r\n          drag()\r\n            .subject(() => {\r\n              const p = [event.x, event.y];\r\n              return [p, p];\r\n            })\r\n            .on('start', () => {\r\n              event.on('drag', function (d) {\r\n                const cursor = select(this);\r\n                const cord = mouse(this);\r\n\r\n                d.x += cord[0] - Number(cursor.attr('width')) / 2;\r\n                d.y += cord[1] - Number(cursor.attr('height')) / 2;\r\n                select(this.parentNode).attr('transform', () => {\r\n                  return (\r\n                    'translate(' + [d.x, d.y] + '),rotate(' + 0 + ',160, 160),scale(' + d.scale + ',' + d.scale + ')'\r\n                  );\r\n                });\r\n              });\r\n            })\r\n        );\r\n      group\r\n        .on('mouseover', function () {\r\n          select(this).select('rect').style('opacity', 1.0);\r\n        })\r\n        .on('mouseout', function () {\r\n          select(this).select('rect').style('opacity', 0);\r\n        });\r\n      // this.undoStack.push({ type: ActionType.Image, image: group.node() });\r\n    };\r\n    tempImg.src = image.toString();\r\n  }\r\n\r\n  private _unsubscribe(subscription: Subscription): void {\r\n    if (subscription) {\r\n      subscription.unsubscribe();\r\n    }\r\n  }\r\n\r\n  private svgString2Image(\r\n    svgString: string,\r\n    width: number,\r\n    height: number,\r\n    format: string,\r\n    callback: (img: string) => void\r\n  ) {\r\n    // set default for format parameter\r\n    format = format || 'png';\r\n    // SVG data URL from SVG string\r\n    const svgData = 'data:image/svg+xml;base64,' + btoa(unescape(encodeURIComponent(svgString)));\r\n    // create canvas in memory(not in DOM)\r\n    const canvas = document.createElement('canvas');\r\n    // get canvas context for drawing on canvas\r\n    const context = canvas.getContext('2d');\r\n    // set canvas size\r\n    canvas.width = width;\r\n    canvas.height = height;\r\n    // create image in memory(not in DOM)\r\n    const image = new Image();\r\n    // later when image loads run this\r\n    image.onload = () => {\r\n      // async (happens later)\r\n      // clear canvas\r\n      context.clearRect(0, 0, width, height);\r\n      // draw image with SVG data to canvas\r\n      context.drawImage(image, 0, 0, width, height);\r\n      // snapshot canvas as png\r\n      const pngData = canvas.toDataURL('image/' + format);\r\n      // pass png data URL to callback\r\n      callback(pngData);\r\n    }; // end async\r\n    // start loading SVG data into in memory image\r\n    image.src = svgData;\r\n  }\r\n\r\n  private saveAsSvg(svgNode): string {\r\n    svgNode.setAttribute('xlink', 'http://www.w3.org/1999/xlink');\r\n    const serializer = new XMLSerializer();\r\n    let svgString = serializer.serializeToString(svgNode);\r\n    svgString = svgString.replace(/(\\w+)?:?xlink=/g, 'xmlns:xlink='); // Fix root xlink without namespace\r\n    svgString = svgString.replace(/NS\\d+:href/g, 'xlink:href');\r\n    return svgString;\r\n  }\r\n\r\n  private download(url: string, name: string): any {\r\n    var file = this.b64toBlob(url);\r\n    this.save.emit(file);\r\n\r\n    return file;\r\n  }\r\n\r\n  /**\r\n   * convertir base64 a blob\r\n   * @param b64DataUrl \r\n   * @param contentType \r\n   * @param sliceSize \r\n   */\r\n  b64toBlob = (b64DataUrl, sliceSize=512) => {\r\n    var arr = b64DataUrl.split(\",\");\r\n    var contentType = arr[0].match(/:(.*?);/)[1]\r\n    const byteCharacters = atob(arr[1]);\r\n    const byteArrays = [];\r\n  \r\n    for (let offset = 0; offset < byteCharacters.length; offset += sliceSize) {\r\n      const slice = byteCharacters.slice(offset, offset + sliceSize);\r\n  \r\n      const byteNumbers = new Array(slice.length);\r\n      for (let i = 0; i < slice.length; i++) {\r\n        byteNumbers[i] = slice.charCodeAt(i);\r\n      }\r\n  \r\n      const byteArray = new Uint8Array(byteNumbers);\r\n      byteArrays.push(byteArray);\r\n    }\r\n  \r\n    const blob = new Blob(byteArrays, {type: contentType});\r\n    return blob;\r\n  }\r\n}\r\n","import { NgModule } from '@angular/core';\r\nimport { NgWhiteboardComponent } from './ng-whiteboard.component';\r\n\r\n@NgModule({\r\n  declarations: [NgWhiteboardComponent],\r\n  imports: [],\r\n  exports: [NgWhiteboardComponent]\r\n})\r\nexport class NgWhiteboardModule {}\r\n"]}