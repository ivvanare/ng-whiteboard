{"version":3,"sources":["ng://ng-whiteboard/lib/ng-whiteboard.service.ts","ng://ng-whiteboard/lib/ng-whiteboard.types.ts","ng://ng-whiteboard/lib/ng-whiteboard.component.ts","ng://ng-whiteboard/lib/ng-whiteboard.module.ts"],"names":["NgWhiteboardService","this","eraseSvgMethodCallSource","Subject","saveSvgMethodCallSource","undoSvgMethodCallSource","redoSvgMethodCallSource","addImageMethodCallSource","eraseSvgMethodCalled$","asObservable","saveSvgMethodCalled$","undoSvgMethodCalled$","redoSvgMethodCalled$","addImageMethodCalled$","prototype","erase","next","save","name","format","undo","redo","addImage","image","Injectable","args","providedIn","WhiteboardOptions","color","backgroundColor","size","linejoin","linecap","ActionType","Line","Image","NgWhiteboardComponent","whiteboardService","whiteboardOptions","init","EventEmitter","clear","imageAdded","selection","undefined","subscriptionList","undoStack","redoStack","ngAfterViewInit","_this","push","subscribe","eraseSvg","_a","saveSvg","undoDraw","redoDraw","initSvg","svgContainer","nativeElement","ngOnDestroy","forEach","subscription","_unsubscribe","selector","d3Line","line","curve","curveBasis","svg","select","call","drag","container","subject","p","event","x","y","on","d","active","append","datum","attr","mouse","length","type","node","emit","drawImage","selectAll","remove","svgString","saveAsSvg","clone","download","btoa","unescape","encodeURIComponent","svgString2Image","Number","style","replace","img","pop","action","drawLine","pathNode","appendChild","group","data","r","scale","tempImg","onload","width","height","toString","cursor","cord","parentNode","src","unsubscribe","callback","svgData","canvas","document","createElement","context","getContext","clearRect","pngData","toDataURL","svgNode","setAttribute","XMLSerializer","serializeToString","url","file","dataURLtoFile","dataurl","filename","arr","split","mime","match","bstr","atob","n","u8arr","Uint8Array","charCodeAt","File","Component","template","ViewChild","static","Input","Output","NgWhiteboardModule","NgModule","declarations","imports","exports"],"mappings":"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","sourcesContent":["import { Injectable } from '@angular/core';\nimport { Subject } from 'rxjs';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class NgWhiteboardService {\n  // Observable string sources\n  private eraseSvgMethodCallSource = new Subject<any>();\n  private saveSvgMethodCallSource = new Subject<{ name: string; format: 'png' | 'jpeg' | 'svg' }>();\n  private undoSvgMethodCallSource = new Subject<any>();\n  private redoSvgMethodCallSource = new Subject<any>();\n  private addImageMethodCallSource = new Subject<string | ArrayBuffer>();\n\n  // Observable string streams\n  eraseSvgMethodCalled$ = this.eraseSvgMethodCallSource.asObservable();\n  saveSvgMethodCalled$ = this.saveSvgMethodCallSource.asObservable();\n  undoSvgMethodCalled$ = this.undoSvgMethodCallSource.asObservable();\n  redoSvgMethodCalled$ = this.redoSvgMethodCallSource.asObservable();\n  addImageMethodCalled$ = this.addImageMethodCallSource.asObservable();\n\n  // Service message commands\n  public erase(): void {\n    this.eraseSvgMethodCallSource.next();\n  }\n  public save(name: string = 'New image', format: 'png' | 'jpeg' | 'svg' = 'png'): void {\n    this.saveSvgMethodCallSource.next({ name, format });\n  }\n  public undo(): void {\n    this.undoSvgMethodCallSource.next();\n  }\n  public redo(): void {\n    this.redoSvgMethodCallSource.next();\n  }\n  public addImage(image: string | ArrayBuffer): void {\n    this.addImageMethodCallSource.next(image);\n  }\n}\n","export class WhiteboardOptions {\n  color = '#000000';\n  backgroundColor = '#ffffff';\n  size = '5px';\n  linejoin: 'miter' | 'round' | 'bevel' | 'miter-clip' | 'arcs' = 'round';\n  linecap: 'butt' | 'square' | 'round' = 'round';\n}\n\nexport interface ActionStack {\n  type: ActionType;\n  line?: SVGPathElement;\n  image?: SVGGElement;\n}\n\nexport enum ActionType {\n  Line,\n  Image\n}\n","import { Component, AfterViewInit, ViewChild, Input, ElementRef, OnDestroy, Output, EventEmitter } from '@angular/core';\nimport { NgWhiteboardService } from './ng-whiteboard.service';\nimport { Subscription } from 'rxjs';\nimport { WhiteboardOptions, ActionStack, ActionType } from './ng-whiteboard.types';\nimport { ContainerElement, curveBasis, select, drag, Selection, line, event, mouse } from 'd3';\n\n@Component({\n  // tslint:disable-next-line: component-selector\n  selector: 'ng-whiteboard-btc',\n  template: `\n    <svg #svgContainer [style.background-color]=\"this.backgroundColor || this.whiteboardOptions.backgroundColor\"></svg>\n  `,\n  styleUrls: ['ng-whiteboard.component.scss'],\n})\nexport class NgWhiteboardComponent implements AfterViewInit, OnDestroy {\n  @ViewChild('svgContainer', { static: false }) private svgContainer: ElementRef<ContainerElement>;\n  @Input() whiteboardOptions: WhiteboardOptions = new WhiteboardOptions();\n  @Input() color: string;\n  @Input() backgroundColor: string;\n  @Input() size: string;\n  @Input() linejoin: 'miter' | 'round' | 'bevel' | 'miter-clip' | 'arcs';\n  @Input() linecap: 'butt' | 'square' | 'round';\n\n  @Output() init = new EventEmitter();\n  @Output() clear = new EventEmitter();\n  @Output() undo = new EventEmitter();\n  @Output() redo = new EventEmitter();\n  @Output() save: EventEmitter<any> = new EventEmitter<string | Blob | File>();\n  @Output() imageAdded = new EventEmitter();\n\n  private selection: Selection<any, unknown, null, undefined> = undefined;\n\n  private subscriptionList: Subscription[] = [];\n\n  private undoStack: ActionStack[] = [];\n  private redoStack: ActionStack[] = [];\n\n  constructor(private whiteboardService: NgWhiteboardService) {}\n\n  ngAfterViewInit() {\n    this.subscriptionList.push(\n      this.whiteboardService.eraseSvgMethodCalled$.subscribe(() => this.eraseSvg(this.selection))\n    );\n\n    this.subscriptionList.push(\n      this.whiteboardService.saveSvgMethodCalled$.subscribe(({ name, format }) => this.saveSvg(name, format))\n    );\n    this.subscriptionList.push(this.whiteboardService.undoSvgMethodCalled$.subscribe(() => this.undoDraw()));\n    this.subscriptionList.push(this.whiteboardService.redoSvgMethodCalled$.subscribe(() => this.redoDraw()));\n    this.subscriptionList.push(this.whiteboardService.addImageMethodCalled$.subscribe((image) => this.addImage(image)));\n\n    this.selection = this.initSvg(this.svgContainer.nativeElement);\n  }\n\n  ngOnDestroy(): void {\n    this.subscriptionList.forEach((subscription) => this._unsubscribe(subscription));\n  }\n\n  private initSvg(selector: ContainerElement) {\n    const d3Line = line().curve(curveBasis);\n    const svg = select(selector).call(\n      drag()\n        .container(selector)\n        .subject(() => {\n          const p = [event.x, event.y];\n          return [p, p];\n        })\n        .on('start', () => {\n          const d = event.subject;\n          const active = svg\n            .append('path')\n            .datum(d)\n            .attr('class', 'line')\n            .attr(\n              'style',\n              `\n           fill: none;\n           stroke: ${this.color || this.whiteboardOptions.color};\n           stroke-width: ${this.size || this.whiteboardOptions.size};\n           stroke-linejoin: ${this.linejoin || this.whiteboardOptions.linejoin};\n           stroke-linecap: ${this.linecap || this.whiteboardOptions.linecap};\n           `\n            );\n          active.attr('d', d3Line);\n          event.on('drag', function () {\n            active.datum().push(mouse(this));\n            active.attr('d', d3Line);\n          });\n          event.on('end', () => {\n            active.attr('d', d3Line);\n            if (this.undoStack.length < 1) {\n              this.redoStack = [];\n            }\n            this.undoStack.push({ type: ActionType.Line, line: active.node() });\n          });\n        })\n    );\n    this.init.emit();\n    return svg;\n  }\n\n  private addImage(image: string | ArrayBuffer) {\n    this.drawImage(image);\n  }\n\n  private eraseSvg(svg: Selection<any, unknown, null, undefined>) {\n    svg.selectAll('*').remove();\n    this.undoStack = [];\n    this.redoStack = [];\n    this.clear.emit();\n  }\n\n  private saveSvg(name, format: 'png' | 'jpeg' | 'svg') {\n    const svgString = this.saveAsSvg(this.selection.clone(true).node());\n    if (format === 'svg') {\n      this.download('data:image/svg+xml;base64,' + btoa(unescape(encodeURIComponent(svgString))), name);\n    } else {\n      this.svgString2Image(\n        svgString,\n        Number(this.selection.style('width').replace('px', '')),\n        Number(this.selection.style('height').replace('px', '')),\n        format,\n        (img) => {\n          this.download(img, name);\n        }\n      );\n    }\n\n    // this.save.emit();\n  }\n\n  private undoDraw() {\n    if (!this.undoStack.length) {\n      return;\n    }\n    this.redoStack.push(this.undoStack.pop());\n    this.selection.selectAll('.line').remove();\n    this.undoStack.forEach((action) => {\n      if (action.type === ActionType.Line) {\n        this.drawLine(action.line);\n      } else if (action.type === ActionType.Image) {\n        this.drawLine(action.image);\n      }\n    });\n    this.undo.emit();\n  }\n\n  private redoDraw() {\n    if (!this.redoStack.length) {\n      return;\n    }\n    this.undoStack.push(this.redoStack.pop());\n    this.selection.selectAll('.line').remove();\n    this.undoStack.forEach((action) => {\n      if (action.type === ActionType.Line) {\n        this.drawLine(action.line);\n      } else if (action.type === ActionType.Image) {\n        this.drawLine(action.image);\n      }\n    });\n    this.redo.emit();\n  }\n\n  private drawLine(pathNode: SVGPathElement | SVGGElement) {\n    this.selection.node().appendChild(pathNode);\n  }\n\n  private drawImage(image: string | ArrayBuffer) {\n    const group = this.selection\n      .append('g')\n      .data([{ x: 20, y: 20, r: 1, scale: 1 }])\n      .attr('x', 0)\n      .attr('y', 0)\n      .attr('transform', 'translate(0,0)');\n\n    const tempImg = new Image();\n    tempImg.onload = () => {\n      const aspectRatio = tempImg.width / tempImg.height;\n      const height = Number(this.selection.style('height').replace('px', ''));\n      // tempImg.height > Number(this.selection.style('height').replace('px', ''))\n      //   ? Number(this.selection.style('height').replace('px', '')) - 40\n      //   : tempImg.height;\n      const width = Number(this.selection.style('width').replace('px', ''));\n      // height === Number(this.selection.style('height').replace('px', '')) - 40\n      //   ? (Number(this.selection.style('height').replace('px', '')) - 40) * aspectRatio\n      //   : tempImg.width;\n      group\n        .append('image')\n        .attr('x', 0)\n        .attr('y', 0)\n        .attr('height', height)\n        .attr('width', width)\n        .attr('preserveAspectRatio', 'none')\n        .attr('xlink:href', image.toString());\n\n      group\n        .append('rect')\n        .attr('x', 0)\n        .attr('y', 0)\n        .attr('width', 20)\n        .attr('height', 20)\n        .style('opacity', 0)\n        .attr('fill', (d) => {\n          return '#cccccc';\n        })\n        .call(\n          drag()\n            .subject(() => {\n              const p = [event.x, event.y];\n              return [p, p];\n            })\n            .on('start', () => {\n              event.on('drag', function (d) {\n                const cursor = select(this);\n                const cord = mouse(this);\n\n                d.x += cord[0] - Number(cursor.attr('width')) / 2;\n                d.y += cord[1] - Number(cursor.attr('height')) / 2;\n                select(this.parentNode).attr('transform', () => {\n                  return (\n                    'translate(' + [d.x, d.y] + '),rotate(' + 0 + ',160, 160),scale(' + d.scale + ',' + d.scale + ')'\n                  );\n                });\n              });\n            })\n        );\n      group\n        .on('mouseover', function () {\n          select(this).select('rect').style('opacity', 1.0);\n        })\n        .on('mouseout', function () {\n          select(this).select('rect').style('opacity', 0);\n        });\n      // this.undoStack.push({ type: ActionType.Image, image: group.node() });\n    };\n    tempImg.src = image.toString();\n  }\n\n  private _unsubscribe(subscription: Subscription): void {\n    if (subscription) {\n      subscription.unsubscribe();\n    }\n  }\n\n  private svgString2Image(\n    svgString: string,\n    width: number,\n    height: number,\n    format: string,\n    callback: (img: string) => void\n  ) {\n    // set default for format parameter\n    format = format || 'png';\n    // SVG data URL from SVG string\n    const svgData = 'data:image/svg+xml;base64,' + btoa(unescape(encodeURIComponent(svgString)));\n    // create canvas in memory(not in DOM)\n    const canvas = document.createElement('canvas');\n    // get canvas context for drawing on canvas\n    const context = canvas.getContext('2d');\n    // set canvas size\n    canvas.width = width;\n    canvas.height = height;\n    // create image in memory(not in DOM)\n    const image = new Image();\n    // later when image loads run this\n    image.onload = () => {\n      // async (happens later)\n      // clear canvas\n      context.clearRect(0, 0, width, height);\n      // draw image with SVG data to canvas\n      context.drawImage(image, 0, 0, width, height);\n      // snapshot canvas as png\n      const pngData = canvas.toDataURL('image/' + format);\n      // pass png data URL to callback\n      callback(pngData);\n    }; // end async\n    // start loading SVG data into in memory image\n    image.src = svgData;\n  }\n\n  private saveAsSvg(svgNode): string {\n    svgNode.setAttribute('xlink', 'http://www.w3.org/1999/xlink');\n    const serializer = new XMLSerializer();\n    let svgString = serializer.serializeToString(svgNode);\n    svgString = svgString.replace(/(\\w+)?:?xlink=/g, 'xmlns:xlink='); // Fix root xlink without namespace\n    svgString = svgString.replace(/NS\\d+:href/g, 'xlink:href');\n    return svgString;\n  }\n\n  private download(url: string, name: string): File {\n    var file = this.dataURLtoFile(url, name);\n\n    this.save.emit(file);\n\n    return file;\n    // const link = document.createElement('a');\n    // link.href = url;\n    // link.setAttribute('visibility', 'hidden');\n    // link.download = name || 'new white-board';\n    // document.body.appendChild(link);\n    // link.click();\n  }\n\n  /**\n   * transformar base64\n   * @param dataurl string base64\n   * @param filename nombre para el File\n   */\n  dataURLtoFile(dataurl, filename) {\n    var arr = dataurl.split(','),\n      mime = arr[0].match(/:(.*?);/)[1],\n      bstr = atob(arr[1]),\n      n = bstr.length,\n      u8arr = new Uint8Array(n);\n\n    while (n--) {\n      u8arr[n] = bstr.charCodeAt(n);\n    }\n\n    return new File([u8arr], filename, { type: mime });\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { NgWhiteboardComponent } from './ng-whiteboard.component';\n\n@NgModule({\n  declarations: [NgWhiteboardComponent],\n  imports: [],\n  exports: [NgWhiteboardComponent]\n})\nexport class NgWhiteboardModule {}\n"]}