{"version":3,"file":"ng-whiteboard.umd.js","sources":["ng://ng-whiteboard/lib/ng-whiteboard.service.ts","ng://ng-whiteboard/lib/ng-whiteboard.types.ts","ng://ng-whiteboard/lib/ng-whiteboard.component.ts","ng://ng-whiteboard/lib/ng-whiteboard.module.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\r\nimport { Subject } from 'rxjs';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class NgWhiteboardService {\r\n  // Observable string sources\r\n  private eraseSvgMethodCallSource = new Subject<any>();\r\n  private saveSvgMethodCallSource = new Subject<{ name: string; format: 'png' | 'jpeg' | 'svg' }>();\r\n  private undoSvgMethodCallSource = new Subject<any>();\r\n  private redoSvgMethodCallSource = new Subject<any>();\r\n  private addImageMethodCallSource = new Subject<string | ArrayBuffer>();\r\n\r\n  // Observable string streams\r\n  eraseSvgMethodCalled$ = this.eraseSvgMethodCallSource.asObservable();\r\n  saveSvgMethodCalled$ = this.saveSvgMethodCallSource.asObservable();\r\n  undoSvgMethodCalled$ = this.undoSvgMethodCallSource.asObservable();\r\n  redoSvgMethodCalled$ = this.redoSvgMethodCallSource.asObservable();\r\n  addImageMethodCalled$ = this.addImageMethodCallSource.asObservable();\r\n\r\n  // Service message commands\r\n  public erase(): void {\r\n    this.eraseSvgMethodCallSource.next();\r\n  }\r\n  public save(name: string = 'New image', format: 'png' | 'jpeg' | 'svg' = 'png'): void {\r\n    this.saveSvgMethodCallSource.next({ name, format });\r\n  }\r\n  public undo(): void {\r\n    this.undoSvgMethodCallSource.next();\r\n  }\r\n  public redo(): void {\r\n    this.redoSvgMethodCallSource.next();\r\n  }\r\n  public addImage(image: string | ArrayBuffer): void {\r\n    this.addImageMethodCallSource.next(image);\r\n  }\r\n}\r\n","export class WhiteboardOptions {\r\n  color = '#000000';\r\n  backgroundColor = '#ffffff';\r\n  size = '5px';\r\n  linejoin: 'miter' | 'round' | 'bevel' | 'miter-clip' | 'arcs' = 'round';\r\n  linecap: 'butt' | 'square' | 'round' = 'round';\r\n}\r\n\r\nexport interface ActionStack {\r\n  type: ActionType;\r\n  line?: SVGPathElement;\r\n  image?: SVGGElement;\r\n}\r\n\r\nexport enum ActionType {\r\n  Line,\r\n  Image\r\n}\r\n","import { Component, AfterViewInit, ViewChild, Input, ElementRef, OnDestroy, Output, EventEmitter } from '@angular/core';\r\nimport { NgWhiteboardService } from './ng-whiteboard.service';\r\nimport { Subscription } from 'rxjs';\r\nimport { WhiteboardOptions, ActionStack, ActionType } from './ng-whiteboard.types';\r\nimport { ContainerElement, curveBasis, select, drag, Selection, line, event, mouse } from 'd3';\r\n\r\n@Component({\r\n  // tslint:disable-next-line: component-selector\r\n  selector: 'ng-whiteboard-btc',\r\n  template: `\r\n    <svg #svgContainer [style.background-color]=\"this.backgroundColor || this.whiteboardOptions.backgroundColor\"></svg>\r\n  `,\r\n  styleUrls: ['ng-whiteboard.component.scss'],\r\n})\r\nexport class NgWhiteboardComponent implements AfterViewInit, OnDestroy {\r\n  @ViewChild('svgContainer', { static: false }) private svgContainer: ElementRef<ContainerElement>;\r\n  @Input() whiteboardOptions: WhiteboardOptions = new WhiteboardOptions();\r\n  @Input() color: string;\r\n  @Input() backgroundColor: string;\r\n  @Input() size: string;\r\n  @Input() linejoin: 'miter' | 'round' | 'bevel' | 'miter-clip' | 'arcs';\r\n  @Input() linecap: 'butt' | 'square' | 'round';\r\n\r\n  @Output() init = new EventEmitter();\r\n  @Output() clear = new EventEmitter();\r\n  @Output() undo = new EventEmitter();\r\n  @Output() redo = new EventEmitter();\r\n  @Output() save: EventEmitter<any> = new EventEmitter<string | Blob | File>();\r\n  @Output() imageAdded = new EventEmitter();\r\n\r\n  private selection: Selection<any, unknown, null, undefined> = undefined;\r\n\r\n  private subscriptionList: Subscription[] = [];\r\n\r\n  private undoStack: ActionStack[] = [];\r\n  private redoStack: ActionStack[] = [];\r\n\r\n  constructor(private whiteboardService: NgWhiteboardService) {}\r\n\r\n  ngAfterViewInit() {\r\n    this.subscriptionList.push(\r\n      this.whiteboardService.eraseSvgMethodCalled$.subscribe(() => this.eraseSvg(this.selection))\r\n    );\r\n\r\n    this.subscriptionList.push(\r\n      this.whiteboardService.saveSvgMethodCalled$.subscribe(({ name, format }) => this.saveSvg(name, format))\r\n    );\r\n    this.subscriptionList.push(this.whiteboardService.undoSvgMethodCalled$.subscribe(() => this.undoDraw()));\r\n    this.subscriptionList.push(this.whiteboardService.redoSvgMethodCalled$.subscribe(() => this.redoDraw()));\r\n    this.subscriptionList.push(this.whiteboardService.addImageMethodCalled$.subscribe((image) => this.addImage(image)));\r\n\r\n    this.selection = this.initSvg(this.svgContainer.nativeElement);\r\n  }\r\n\r\n  ngOnDestroy(): void {\r\n    this.subscriptionList.forEach((subscription) => this._unsubscribe(subscription));\r\n  }\r\n\r\n  private initSvg(selector: ContainerElement) {\r\n    const d3Line = line().curve(curveBasis);\r\n    const svg = select(selector).call(\r\n      drag()\r\n        .container(selector)\r\n        .subject(() => {\r\n          const p = [event.x, event.y];\r\n          return [p, p];\r\n        })\r\n        .on('start', () => {\r\n          const d = event.subject;\r\n          const active = svg\r\n            .append('path')\r\n            .datum(d)\r\n            .attr('class', 'line')\r\n            .attr(\r\n              'style',\r\n              `\r\n           fill: none;\r\n           stroke: ${this.color || this.whiteboardOptions.color};\r\n           stroke-width: ${this.size || this.whiteboardOptions.size};\r\n           stroke-linejoin: ${this.linejoin || this.whiteboardOptions.linejoin};\r\n           stroke-linecap: ${this.linecap || this.whiteboardOptions.linecap};\r\n           `\r\n            );\r\n          active.attr('d', d3Line);\r\n          event.on('drag', function () {\r\n            active.datum().push(mouse(this));\r\n            active.attr('d', d3Line);\r\n          });\r\n          event.on('end', () => {\r\n            active.attr('d', d3Line);\r\n            if (this.undoStack.length < 1) {\r\n              this.redoStack = [];\r\n            }\r\n            this.undoStack.push({ type: ActionType.Line, line: active.node() });\r\n          });\r\n        })\r\n    );\r\n    this.init.emit();\r\n    return svg;\r\n  }\r\n\r\n  private addImage(image: string | ArrayBuffer) {\r\n    this.drawImage(image);\r\n  }\r\n\r\n  private eraseSvg(svg: Selection<any, unknown, null, undefined>) {\r\n    svg.selectAll('*').remove();\r\n    this.undoStack = [];\r\n    this.redoStack = [];\r\n    this.clear.emit();\r\n  }\r\n\r\n  private saveSvg(name, format: 'png' | 'jpeg' | 'svg') {\r\n    const svgString = this.saveAsSvg(this.selection.clone(true).node());\r\n    if (format === 'svg') {\r\n      this.download('data:image/svg+xml;base64,' + btoa(unescape(encodeURIComponent(svgString))), name);\r\n    } else {\r\n      this.svgString2Image(\r\n        svgString,\r\n        Number(this.selection.style('width').replace('px', '')),\r\n        Number(this.selection.style('height').replace('px', '')),\r\n        format,\r\n        (img) => {\r\n          this.download(img, name);\r\n        }\r\n      );\r\n    }\r\n\r\n    // this.save.emit();\r\n  }\r\n\r\n  private undoDraw() {\r\n    if (!this.undoStack.length) {\r\n      return;\r\n    }\r\n    this.redoStack.push(this.undoStack.pop());\r\n    this.selection.selectAll('.line').remove();\r\n    this.undoStack.forEach((action) => {\r\n      if (action.type === ActionType.Line) {\r\n        this.drawLine(action.line);\r\n      } else if (action.type === ActionType.Image) {\r\n        this.drawLine(action.image);\r\n      }\r\n    });\r\n    this.undo.emit();\r\n  }\r\n\r\n  private redoDraw() {\r\n    if (!this.redoStack.length) {\r\n      return;\r\n    }\r\n    this.undoStack.push(this.redoStack.pop());\r\n    this.selection.selectAll('.line').remove();\r\n    this.undoStack.forEach((action) => {\r\n      if (action.type === ActionType.Line) {\r\n        this.drawLine(action.line);\r\n      } else if (action.type === ActionType.Image) {\r\n        this.drawLine(action.image);\r\n      }\r\n    });\r\n    this.redo.emit();\r\n  }\r\n\r\n  private drawLine(pathNode: SVGPathElement | SVGGElement) {\r\n    this.selection.node().appendChild(pathNode);\r\n  }\r\n\r\n  private drawImage(image: string | ArrayBuffer) {\r\n    const group = this.selection\r\n      .append('g')\r\n      .data([{ x: 20, y: 20, r: 1, scale: 1 }])\r\n      .attr('x', 0)\r\n      .attr('y', 0)\r\n      .attr('transform', 'translate(0,0)');\r\n\r\n    const tempImg = new Image();\r\n    tempImg.onload = () => {\r\n      const aspectRatio = tempImg.width / tempImg.height;\r\n      const height = Number(this.selection.style('height').replace('px', ''));\r\n      // tempImg.height > Number(this.selection.style('height').replace('px', ''))\r\n      //   ? Number(this.selection.style('height').replace('px', '')) - 40\r\n      //   : tempImg.height;\r\n      const width = Number(this.selection.style('width').replace('px', ''));\r\n      // height === Number(this.selection.style('height').replace('px', '')) - 40\r\n      //   ? (Number(this.selection.style('height').replace('px', '')) - 40) * aspectRatio\r\n      //   : tempImg.width;\r\n      group\r\n        .append('image')\r\n        .attr('x', 0)\r\n        .attr('y', 0)\r\n        .attr('height', height)\r\n        .attr('width', width)\r\n        .attr('preserveAspectRatio', 'none')\r\n        .attr('xlink:href', image.toString());\r\n\r\n      group\r\n        .append('rect')\r\n        .attr('x', 0)\r\n        .attr('y', 0)\r\n        .attr('width', 20)\r\n        .attr('height', 20)\r\n        .style('opacity', 0)\r\n        .attr('fill', (d) => {\r\n          return '#cccccc';\r\n        })\r\n        .call(\r\n          drag()\r\n            .subject(() => {\r\n              const p = [event.x, event.y];\r\n              return [p, p];\r\n            })\r\n            .on('start', () => {\r\n              event.on('drag', function (d) {\r\n                const cursor = select(this);\r\n                const cord = mouse(this);\r\n\r\n                d.x += cord[0] - Number(cursor.attr('width')) / 2;\r\n                d.y += cord[1] - Number(cursor.attr('height')) / 2;\r\n                select(this.parentNode).attr('transform', () => {\r\n                  return (\r\n                    'translate(' + [d.x, d.y] + '),rotate(' + 0 + ',160, 160),scale(' + d.scale + ',' + d.scale + ')'\r\n                  );\r\n                });\r\n              });\r\n            })\r\n        );\r\n      group\r\n        .on('mouseover', function () {\r\n          select(this).select('rect').style('opacity', 1.0);\r\n        })\r\n        .on('mouseout', function () {\r\n          select(this).select('rect').style('opacity', 0);\r\n        });\r\n      // this.undoStack.push({ type: ActionType.Image, image: group.node() });\r\n    };\r\n    tempImg.src = image.toString();\r\n  }\r\n\r\n  private _unsubscribe(subscription: Subscription): void {\r\n    if (subscription) {\r\n      subscription.unsubscribe();\r\n    }\r\n  }\r\n\r\n  private svgString2Image(\r\n    svgString: string,\r\n    width: number,\r\n    height: number,\r\n    format: string,\r\n    callback: (img: string) => void\r\n  ) {\r\n    // set default for format parameter\r\n    format = format || 'png';\r\n    // SVG data URL from SVG string\r\n    const svgData = 'data:image/svg+xml;base64,' + btoa(unescape(encodeURIComponent(svgString)));\r\n    // create canvas in memory(not in DOM)\r\n    const canvas = document.createElement('canvas');\r\n    // get canvas context for drawing on canvas\r\n    const context = canvas.getContext('2d');\r\n    // set canvas size\r\n    canvas.width = width;\r\n    canvas.height = height;\r\n    // create image in memory(not in DOM)\r\n    const image = new Image();\r\n    // later when image loads run this\r\n    image.onload = () => {\r\n      // async (happens later)\r\n      // clear canvas\r\n      context.clearRect(0, 0, width, height);\r\n      // draw image with SVG data to canvas\r\n      context.drawImage(image, 0, 0, width, height);\r\n      // snapshot canvas as png\r\n      const pngData = canvas.toDataURL('image/' + format);\r\n      // pass png data URL to callback\r\n      callback(pngData);\r\n    }; // end async\r\n    // start loading SVG data into in memory image\r\n    image.src = svgData;\r\n  }\r\n\r\n  private saveAsSvg(svgNode): string {\r\n    svgNode.setAttribute('xlink', 'http://www.w3.org/1999/xlink');\r\n    const serializer = new XMLSerializer();\r\n    let svgString = serializer.serializeToString(svgNode);\r\n    svgString = svgString.replace(/(\\w+)?:?xlink=/g, 'xmlns:xlink='); // Fix root xlink without namespace\r\n    svgString = svgString.replace(/NS\\d+:href/g, 'xlink:href');\r\n    return svgString;\r\n  }\r\n\r\n  private download(url: string, name: string): any {\r\n    var file = this.b64toBlob(url);\r\n    this.save.emit(file);\r\n\r\n    return file;\r\n  }\r\n\r\n  /**\r\n   * convertir base64 a blob\r\n   * @param b64DataUrl \r\n   * @param contentType \r\n   * @param sliceSize \r\n   */\r\n  b64toBlob = (b64DataUrl, sliceSize=512) => {\r\n    var arr = b64DataUrl.split(\",\");\r\n    var contentType = arr[0].match(/:(.*?);/)[1]\r\n    const byteCharacters = atob(arr[1]);\r\n    const byteArrays = [];\r\n  \r\n    for (let offset = 0; offset < byteCharacters.length; offset += sliceSize) {\r\n      const slice = byteCharacters.slice(offset, offset + sliceSize);\r\n  \r\n      const byteNumbers = new Array(slice.length);\r\n      for (let i = 0; i < slice.length; i++) {\r\n        byteNumbers[i] = slice.charCodeAt(i);\r\n      }\r\n  \r\n      const byteArray = new Uint8Array(byteNumbers);\r\n      byteArrays.push(byteArray);\r\n    }\r\n  \r\n    const blob = new Blob(byteArrays, {type: contentType});\r\n    return blob;\r\n  }\r\n}\r\n","import { NgModule } from '@angular/core';\r\nimport { NgWhiteboardComponent } from './ng-whiteboard.component';\r\n\r\n@NgModule({\r\n  declarations: [NgWhiteboardComponent],\r\n  imports: [],\r\n  exports: [NgWhiteboardComponent]\r\n})\r\nexport class NgWhiteboardModule {}\r\n"],"names":["Subject","Injectable","EventEmitter","line","curveBasis","select","drag","event","mouse","Component","ViewChild","Input","Output","NgModule"],"mappings":"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"}